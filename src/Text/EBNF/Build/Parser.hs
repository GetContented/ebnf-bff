module Text.EBNF.Build.Parser where

import Text.EBNF.SyntaxTree
import Text.EBNF.Informal (syntax)
import Text.EBNF.Helper
import Text.Parsec.String
import Text.EBNF.Informal (nullParser)
import Text.EBNF.Build.Parser.Parts
-- import Text.EBNF.Build.Parser.Except

{-|
    given a syntax tree for a valid EBNF grammar, returns a
    association list with the key as the meta identifier.
-}
build :: SyntaxTree -> [GrammarRule]
build st = [GrammarRule "" nullParser]


{-|
    transform that discards the information in a EBNF AST
    generated by EBNF.Informal that is not relevant.
-}
discard :: SyntaxTree -> SyntaxTree
discard st = prune (\a -> elem (identifier a) list) st
                where
                    list = [ "irrelevent"
                           , "concatenate symbol"
                           , "definition separator symbol"
                           , "defining symbol"
                           , "terminator symbol"]
