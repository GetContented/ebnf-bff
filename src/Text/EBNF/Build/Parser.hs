module Text.EBNF.Build.Parser where

import Text.EBNF.SyntaxTree
import Text.EBNF.Informal (syntax)
import Text.EBNF.Helper
import qualified EBNF.Build.Parser.Transforms as T
import Text.Parsec


{-|
    given a syntax tree that
-}
build :: SyntaxTree -> ([(Identifier, p)] -> SyntaxTree) -> SyntaxTree
build st =


{-|
    transform that discards the information in a EBNF AST
    generated by EBNF.Informal that is not relevant.
-}
discard :: SyntaxTree -> SyntaxTree
discard st = idlist [ "irrelevent"
                    , "concatenate symbol"
                    , "definition separator symbol"
                    ] prune st
